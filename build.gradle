plugins {
    id 'biz.aQute.bnd.builder' version '3.3.0'
}

sourceCompatibility = '1.8'
version = '20.11'

repositories {
    maven { url "https://repo.dotcms.com/artifactory/libs-release" }
}
configurations {
    osgiLibs
}
dependencies {


    compile 'com.dotcms:dotcms:20.10.1' 
    compile  'org.opensaml:opensaml-core:3.3.1'
    compile  'org.opensaml:opensaml-saml-api:3.3.1'
    compile  'org.opensaml:opensaml-security-api:3.3.1'
    compile  'org.opensaml:opensaml-xmlsec-impl:3.3.1'
    compile  'org.opensaml:opensaml-xmlsec-api:3.3.1'
    compile  'org.opensaml:opensaml-security-impl:3.3.1'
    compile  'org.opensaml:opensaml-messaging-impl:3.3.1'
    compile  'org.opensaml:opensaml-messaging-api:3.3.1'
    compile  'org.opensaml:opensaml-storage-impl:3.3.1'
    compile  'org.opensaml:opensaml-storage-api:3.3.1'
    compile  'org.opensaml:opensaml-xacml-api:3.3.1'
    compile  'org.opensaml:opensaml-xacml-saml-api:3.3.1'
    compile  'org.opensaml:opensaml-xacml-saml-impl:3.3.1'
    compile  'org.apache.servicemix.bundles:org.apache.servicemix.bundles.opensaml:3.3.1_1'
    testCompile 'junit:junit:4.12'
    
}

import java.util.jar.*
jar.baseName = 'com.dotcms.samlbundle'
/////////////////////////
//Plugin jar
/////////////////////////
jar {
    manifest {
        attributes (
                'Bundle-Vendor': 'dotCMS',
                'Bundle-Description': 'dotCMS - SAML Provider',
                'Bundle-DocURL': 'https://dotcms.com/',
                'Bundle-Activator': 'com.dotcms.saml.osgi.Activator',
                'DynamicImport-Package': '*',
                'Import-Package': '''
                    !com.google.common.*,
                    *;version=0.1
                    
                ''',
                'Include-Resource': '''
                        lib/guava-20.0.jar;lib:=true,
                        lib/commons-collections-3.2.1.jar;lib:=true,
                        lib/commons-io-2.6.jar;lib:=true,
                        lib/commons-lang-2.4.jar;lib:=true,
                        lib/metrics-core-4.0.0.jar;lib:=true,
                        lib/stax-api-1.0-2.jar;lib:=true,                        
                        lib/joda-time-2.9.jar;lib:=true,
                        lib/java-support-7.3.0.jar;lib:=true,
                        lib/xmlsec-2.0.5.jar;lib:=true,                        
                        lib/bcprov-jdk15on-1.54.jar;lib:=true,
                        lib/stax2-api-3.1.4.jar;lib:=true,   
                        lib/woodstox-core-asl-4.4.1.jar;lib:=true,                        
                        lib/cryptacular-1.1.1.jar;lib:=true,
                        lib/hamcrest-core-1.3.jar;lib:=true,
                        lib/opensaml-core-3.3.1.jar;lib:=true,
                        lib/opensaml-messaging-api-3.3.1.jar;lib:=true,
                        lib/opensaml-messaging-impl-3.3.1.jar;lib:=true,
                        lib/opensaml-profile-api-3.3.1.jar;lib:=true,
                        lib/opensaml-profile-impl-3.3.1.jar;lib:=true,
                        lib/opensaml-saml-impl-3.3.1.jar;lib:=true,
                        lib/opensaml-saml-api-3.3.1.jar;lib:=true,
                        lib/opensaml-security-api-3.3.1.jar;lib:=true,
                        lib/opensaml-security-impl-3.3.1.jar;lib:=true,
                        lib/opensaml-soap-api-3.3.1.jar;lib:=true,
                        lib/opensaml-soap-impl-3.3.1.jar;lib:=true,
                        lib/opensaml-storage-api-3.3.1.jar;lib:=true,
                        lib/opensaml-storage-impl-3.3.1.jar;lib:=true,
                        lib/opensaml-xacml-api-3.3.1.jar;lib:=true,
                        lib/opensaml-xacml-impl-3.3.1.jar;lib:=true,
                        lib/opensaml-xacml-saml-api-3.3.1.jar;lib:=true,
                        lib/opensaml-xacml-saml-impl-3.3.1.jar;lib:=true,
                        lib/opensaml-xmlsec-api-3.3.1.jar;lib:=true,
                        lib/opensaml-xmlsec-impl-3.3.1.jar;lib:=true
                '''
        )
    }
}

jar.finalizedBy 'fragmentJar'

/**
 * Searches for jars inside the src/main/resources/libs folder, the returned list is used for the
 * Bundle-ClassPath attribute.
 * @return String with the list of jars inside the src/main/resources/libs folder or empty if the
 * folder does not exist or it is empty.
 */
def classPathLibraries() {

    def bundleClassPath = "";
    fileTree("src/main/resources/libs").filter { it.isFile() }.each { bundleClassPath += "libs/" + it.name + "," }

    if (bundleClassPath != "") {
        bundleClassPath = '.,' + bundleClassPath
    }

    return bundleClassPath
}

/////////////////////////
//Fragment jar
/////////////////////////

ext {
    bundleName = "OSGI 3rd Party library fragment"
    bundleDescription = "dotCMS - OSGI 3rd Party library fragment"
    fragmentHost = "system.bundle; extension:=framework"
    bundleSymbolicName = "" //Auto generated based on the plugin jar
    bundleVersion = "" //Auto generated based on the plugin jar
    importPackage = "" //Auto generated based on the plugin jar
    bundleManifestVersion = "" //Auto generated based on the plugin jar
    bundleDocURL = "" //Auto generated based on the plugin jar
    bundleVendor = "" //Auto generated based on the plugin jar
}

/**
 * The import generates versions like this: version="[1.8,2)"
 * That format does not work for the export, so we need to replace it
 * to: version=0
 */
ext.fixVersionNumber = {importValue ->
    return importValue.replaceAll("\"\\[[0-9.,]+\\)\"", "0")
}

/**
 * Reads the Manifest file of the just created plugin jar in order to get the required info
 * to automatically create the fragment jar.
 */
task readManifesttAttributes {
    doFirst {
        File file = configurations.baseline.singleFile
        JarFile jar = new JarFile(file)
        Attributes manifest = jar.getManifest().getMainAttributes()
        bundleSymbolicName = "${manifest.getValue('Bundle-SymbolicName')}"
        bundleVersion = "${manifest.getValue('Bundle-Version')}"
        importPackage = "${manifest.getValue('Import-Package')}"
        bundleManifestVersion = "${manifest.getValue('Bundle-ManifestVersion')}"
        bundleDocURL = "${manifest.getValue('Bundle-DocURL')}"
        bundleVendor = "${manifest.getValue('Bundle-Vendor')}"
    }
}

task fragmentJar(type: Jar) {

    doFirst {
        //Setting the fragment jar name
        baseName = jar.baseName
        archiveName = "${baseName}.fragment-${version}.jar"
        importPackage = fixVersionNumber(importPackage)

        manifest {
            attributes (
                    'Bundle-Name': "${bundleName}",
                    'Bundle-Description': "${bundleDescription}",
                    'Bundle-Vendor': "${bundleVendor}",
                    'Bundle-Version': "${version}",
                    'Bundle-SymbolicName': "${baseName}.fragment",
                    'Bundle-ManifestVersion': "${bundleManifestVersion}",
                    'Bundle-DocURL': "${bundleDocURL}",
                    'Fragment-Host': "${fragmentHost}",
                    'Export-Package': "${importPackage}"
            )
        }
    }
}
fragmentJar.dependsOn 'readManifesttAttributes'

task wrapper(type: Wrapper) {
    gradleVersion = '4.2'
}


